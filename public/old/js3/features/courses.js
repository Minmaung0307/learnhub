import { el, toast } from '../services/ui.js'; import { getFirebase, isAdmin } from '../services/firebase.js'; import { onAuth } from '../services/auth.js';
async function ensurePayPal(){ if(window.paypal) return; const id=window.__PAYPAL_CLIENT_ID||'test'; await new Promise((res,rej)=>{const s=document.createElement('script'); s.src=`https://www.paypal.com/sdk/js?client-id=${encodeURIComponent(id)}&currency=USD`; s.onload=res; s.onerror=rej; document.head.appendChild(s);}).catch(()=>{}); }
export async function viewCourses(){ const app=document.getElementById('app'); app.innerHTML=''; const wrap=el('section',{class:'grid cards'}); app.append(el('h2',{},'Courses'),wrap);
  const {db,collection,getDocs,orderBy,query,doc,setDoc,deleteDoc,serverTimestamp}=await getFirebase(); const user=await new Promise(r=>onAuth(r)); const admin=await isAdmin(user?.uid);
  if(admin){ const bar=el('div',{class:'kbar mb-4'},[ el('button',{class:'btn',onclick:()=>openEditor()},'New Course'), el('button',{class:'btn ghost',onclick:()=>seedDemo()},'Seed Demo') ]); app.prepend(bar); }
  async function render(){ wrap.innerHTML=''; const snap=await getDocs(query(collection(db,'courses'),orderBy('title'))); snap.forEach(d=>wrap.append(courseCard(d.id,d.data()))); }
  function courseCard(id,c){ const free=c.type!=='paid'; const card=el('div',{class:'card course-card'},[ el('img',{src:c.image||'https://images.unsplash.com/photo-1529070538774-1843cb3265df?q=80&w=800&auto=format&fit=crop',alt:c.title}), el('div',{class:'title mt-2'},c.title||'Untitled'), el('div',{class:'muted'},c.short||''), el('div',{class:'row gap mt-2'},[ el('span',{class:'badge'},free?'Free':'Paid'), el('span',{class:'badge'},`${c.credit||1} credit`) ]), el('div',{class:'row gap mt-2'},[ free? el('button',{class:'btn primary',onclick:()=>enroll(id)},'Enroll') : el('div',{id:`pp-${id}`},'Loading PayPalâ€¦'), admin && el('button',{class:'btn',onclick:()=>openEditor(id,c)},'Edit'), admin && el('button',{class:'btn ghost',onclick:()=>delCourse(id)},'Delete') ].filter(Boolean)) ]);
    if(!free) ensurePayPal().then(()=>{ if(!window.paypal) return; window.paypal.Buttons({style:{shape:'pill',layout:'horizontal',tagline:false}, createOrder:(_,a)=>a.order.create({purchase_units:[{amount:{value:String(c.price||5)}}]}), onApprove: async(_,a)=>{await a.order.capture(); await enroll(id,true); toast('Enrolled (paid)');}}).render(`#pp-${id}`); }); return card; }
  async function enroll(courseId,paid=false){ if(!user) return toast('Please login first','bad'); await setDoc(doc(db,'enrollments',`${user.uid}_${courseId}`),{uid:user.uid,courseId,paid,createdAt:serverTimestamp()},{merge:true}); toast('Enrolled'); }
  async function delCourse(id){ if(!confirm('Delete course?'))return; await deleteDoc(doc(db,'courses',id)); render(); }
  function openEditor(id=null,data={}){ const dlg=document.createElement('dialog'); dlg.innerHTML=`<form method="dialog" class="card" style="min-width:480px"><h3>${id?'Edit':'New'} Course</h3><input id="f-title" placeholder="Title" value="${data.title||''}" required/><textarea id="f-short" placeholder="Short description">${data.short||''}</textarea><input id="f-image" placeholder="Image URL" value="${data.image||''}"/><div class="row gap"><select id="f-type"><option value="free" ${data.type!=='paid'?'selected':''}>Free</option><option value="paid" ${data.type==='paid'?'selected':''}>Paid</option></select><input id="f-price" type="number" min="0" step="0.1" placeholder="Price (USD)" value="${data.price||5}"/><input id="f-credit" type="number" min="1" step="1" placeholder="Credit" value="${data.credit||1}"/></div><menu class="row gap mt-2 right"><button class="btn ghost" value="cancel">Cancel</button><button class="btn primary" value="ok">Save</button></menu></form>`; document.body.appendChild(dlg); dlg.showModal(); dlg.addEventListener('close', async()=>{ if(dlg.returnValue!=='ok'){dlg.remove();return;} const payload={ title:dlg.querySelector('#f-title').value.trim(), short:dlg.querySelector('#f-short').value.trim(), image:dlg.querySelector('#f-image').value.trim(), type:dlg.querySelector('#f-type').value, price:Number(dlg.querySelector('#f-price').value||0), credit:Number(dlg.querySelector('#f-credit').value||1) }; await setDoc(doc(db,'courses',id||crypto.randomUUID()),payload,{merge:true}); dlg.remove(); render(); }); }
  async function seedDemo(){ if(!user || !(await isAdmin(user.uid))) return toast('Admins only','bad'); const {writeBatch,getDocs}=await getFirebase(); const colls=['courses','messages']; for(const c of colls){ const qs=await getDocs(collection(db,c)); const b=writeBatch(db); qs.forEach(d=>b.delete(doc(db,c,d.id))); await b.commit(); } const demo=[ {id:'js-101',title:'JavaScript 101',short:'Basics for web dev',type:'free',credit:1,image:'https://images.unsplash.com/photo-1555066931-4365d14bab8c?q=80&w=1200&auto=format&fit=crop'}, {id:'css-mastery',title:'CSS Mastery',short:'Layouts & animations',type:'paid',price:9.9,credit:2,image:'https://images.unsplash.com/photo-1551033406-611cf9a28f67?q=80&w=1200&auto=format&fit=crop'} ]; const b=writeBatch(db); demo.forEach(c=>b.set(doc(db,'courses',c.id),c)); await b.commit(); toast('Seeded demo courses'); render(); }
  render().catch(e=>toast(e.message,'bad')); }